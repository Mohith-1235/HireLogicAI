/**
 * @file Firestore Security Rules for HireLogic AI User Accounts
 * @corePhilosophy This ruleset enforces a strict user-ownership model for all user account data.
 * @dataStructure All user data is stored under the `/userAccounts/{userAccountId}` path, where `userAccountId` MUST match the Firebase Auth UID of the user.
 * @keySecurityDecisions
 *   - Users can only access their own user account data.
 *   - Listing of all user accounts is explicitly denied.
 *   - User account creation is restricted to authenticated users whose UID matches the `userAccountId` in the path.
 * @denormalizationForAuthorization N/A - Ownership is enforced via path matching.
 * @structuralSegregation N/A - Only user account data is stored.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to individual user account documents.
     * @path /userAccounts/{userAccountId}
     * @allow (create) Authenticated user with matching UID can create their account.
     * @allow (get, update, delete) Authenticated user with matching UID can read, update, or delete their own account.
     * @deny (create) Unauthenticated users cannot create accounts.
     * @deny (get, update, delete) Authenticated users cannot access other user accounts.
     * @principle Enforces document ownership for all operations.
     */
    match /userAccounts/{userAccountId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the account.
      function isOwner(userAccountId) {
        return request.auth.uid == userAccountId;
      }

      // Helper function to check if the user is the existing owner of the account
      function isExistingOwner(userAccountId) {
          return isOwner(userAccountId) && resource != null;
      }

      // Allow a user to create their own account if they are authenticated and the UID matches the document ID.
      allow create: if isSignedIn() && isOwner(userAccountId) && request.resource.data.id == request.auth.uid;

      // Allow a user to get their own account if they are authenticated and the UID matches the document ID.
      allow get: if isSignedIn() && isOwner(userAccountId);

      // Allow a user to update their own account if they are authenticated, the UID matches the document ID, and the document exists.
      allow update: if isExistingOwner(userAccountId) && request.resource.data.id == resource.data.id;

      // Allow a user to delete their own account if they are authenticated, the UID matches the document ID, and the document exists.
      allow delete: if isExistingOwner(userAccountId);

      // Prevent anyone from listing all user accounts.
      allow list: if false;
    }
  }
}